# GraphQL scalars

scalar Time
scalar Upload

# GraphQL schema

type User {
  id: Int!
  loginName: String!
  nickname: String
  password: String
  email: String
  about: String
  avatar: String

  post: [Post]
  comment: [Comment]
  follow: [User]
  follower: [User]
  block: [User]
  bookmarkList: [Post]
}

type Message {
  messageId: Int!
  userFrom: Int!
  userTo: Int!
  content: String!
  createdAt: Time
}

type Post {
  id: Int!
  title: String
  content: String
  view: Int
  like: Int
  comments_num: Int
  tag: Int
  position: String
  createdAt: Time
  updatedAt: Time

  user: User
  comment: [Comment]
  attachment: [Attachment]
}


type BookmarkList {
  id: Int!
  list: String
  createdAt: Time
  updatedAt: Time

  user: User
  post: [Post]
}

type myTime {
  unixTime: Int!
  timeStamp: String!
}

type Attachment {
  parentId: Int!
  parentType: AttachmentParent!
  fileName: String!
}

type LoginInfo {
  token: String!
  userId: Int!
}


type Comment {
  id: Int!
  content: String
  like: Int
  createdAt: Time
  updatedAt: Time

  user: User
  post: Post
  attachment: [Attachment]
}

input NewUser {
  loginName: String!
  password: String!
}

input UpdateUser {
  nickname: String
  email: String
  about: String
  avatar: String
  password: String
}

input GetUserInput {
  limit: Int! = 10
  offset: Int! = 0
  orderBy: UserOrderBy! = user_id
  order: Order! = ASC
}

input LoginSession {
  loginName: String!
  password: String!
}

input MessageInput {
  toId: Int!
  content: String!
}

input NewPost {
  userId: Int!
  title: String
  content: String
  tag: Int
  position: String
}

input NewComment {
  userId: Int!
  postId: Int!
  content: String
}

input NewMarkPost {
  postId: Int!
  bookmarkListId: Int!
}

input UpdatePost {
  postId: Int!
  title: String
  content: String
}

input UpdateComment {
  commentId: Int!
  content: String
}


enum AttachmentParent {
  post
  comment
}

enum UserOrderBy {
  user_id
  nickname
}


input PostUpload {
  upload: Upload!
  parentId: Int!
  parentType: AttachmentParent!
}

type Mutation {
  """ 注册帐号，设置密码 """
  createUser (input: NewUser!): User!

  """ 对用户进行关注和取消关注 """
  followUser(input: Int!): Boolean!
  unfollowUser(input: Int!): Boolean!

  """ 删除用户 """
  deleteUser(input: Int!): Boolean!
  """ 修改用户名，头像，简介，密码  """
  updateUser(input: UpdateUser!): User!

  """屏蔽用户"""
  blockUser(input: Int!): Boolean!
  unblockUser(input: Int!): Boolean!

  """ 私信 """
  sendMessage(input: MessageInput!): Boolean!


  """ 登录 """
  login(input: LoginSession!): LoginInfo!
  logout: Boolean!


  createPost(input: NewPost!): Post!
  createComment(input: NewComment!): Comment!

  deletePost(input: Int!): Boolean!
  deleteComment(input: Int!): Boolean!

  updatePost(input: UpdatePost!): Post!
  likePost(input: Int!): Boolean!
  dislikePost(input: Int!): Boolean!
  newBookmarkList(input: String!): BookmarkList!
  markPost(input: Int!): Boolean!
  unmarkPost(input: Int!): Boolean!

  updateComment(input: UpdateComment!): Comment!
  likeComment(input: Int!): Boolean!
  dislikeComment(input: Int!): Boolean!

  fileUpload(input: PostUpload): Boolean!
}

enum PostOrderBy {
  post_id
  title
  content
  view
  like
  userId
  created_at
  updated_at
  comments_num
}

enum CommentOrderBy {
  comment_id
  content
  like
  created_at
  updated_at
}

enum Order {
  ASC
  DESC
}

input GetPostInput {
  limit: Int! = 10
  offset: Int! = 0
  orderBy: PostOrderBy! = post_id
  order: Order! = ASC
  followed: Boolean = false
  tags: Int
}

input GetCommentInput {
  limit: Int! = 10
  offset: Int! = 0
  orderBy: CommentOrderBy! = comment_id
  order: Order! = ASC
}


type Query {
   """ 查询用户 """
  users(input: GetUserInput!): [User!]!
  """ 查询用户 """
  getUserById(input: Int!): User!

  """ 获取本人信息 """
  me: User!
  """ 获取本人的私信 """
  myMessage(from: Int, offset: Int = 0, limit: Int = 10): [Message!]!
  """获取和我私信的用户"""
  myMessageUser: [User!]!

  globalSearch(query: String!): [Post]
  getUserFavoritePost(input: Int!): [Post]

  posts(input: GetPostInput!): [Post]
  postDetail(input: Int!): Post
  comment(input: GetCommentInput!): [Comment!]!
}

type Subscription {
    currentTime: myTime!
    messageToMe: Message!
}